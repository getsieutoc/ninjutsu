generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

enum UserRole {
  USER
  ADMIN
  AUTHOR
  MANAGER
}

enum PostType {
  DEFAULT
  AUDIO
  VIDEO
  YOUTUBE
}

model Account {
  id                String  @id @default(uuid())
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  userId            String
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String
  image         String?
  role          UserRole  @default(USER)
  preferences   Json      @default("{}")
  accounts      Account[]
  sessions      Session[]
  pages         Page[]
  posts         Post[]
  confirmCode   String?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Page {
  id          String    @id @default(uuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  publishedAt DateTime?
  title       String    @db.VarChar(255)
  slug        String    @unique @db.VarChar(255)
  content     String
  components  Json      @default("{}")
  locale      String
  isBlog      Boolean?
  meta        Json?     @default("[{}]")
  tags        Tag[]

  authorId String
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)

  originalId      String?
  originalPage    Page?   @relation("OriginalTranslated", fields: [originalId], references: [id])
  translatedPages Page[]  @relation("OriginalTranslated")
}

model Post {
  id            String    @id @default(uuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  publishedAt   DateTime?
  title         String    @db.VarChar(255)
  slug          String    @unique @db.VarChar(255)
  content       String
  locale        String
  tags          Tag[]
  type          PostType? @default(DEFAULT)
  featuredImage String?

  authorId String
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)

  originalId      String?
  originalPost    Post?   @relation("OriginalTranslated", fields: [originalId], references: [id])
  translatedPosts Post[]  @relation("OriginalTranslated")
}

model Tag {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  value     String   @db.VarChar(128)
  posts     Post[]
  pages     Page[]
}

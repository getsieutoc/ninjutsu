generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATA_URL")
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  siteId            String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String
  role          UserRole  @default(USER)
  preferences   Json      @default("{}")
  confirmCode   String?
  siteId        String?
  accounts      Account[]
  pages         Page[]
  posts         Post[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Page {
  id          String    @id @default(uuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  publishedAt DateTime?
  title       String    @db.VarChar(255)
  slug        String    @unique @db.VarChar(255)
  content     String
  components  Json      @default("{}")
  authorId    String
  isBlog      Boolean?
  meta        Json?     @default("[{}]")
  siteId      String?
  author      User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  tags        Tag[]     @relation("PageToTag")
}

model Post {
  id            String    @id @default(uuid())
  title         String    @db.VarChar(255)
  content       String
  slug          String    @unique @db.VarChar(255)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  authorId      String
  publishedAt   DateTime?
  featuredImage String?
  siteId        String?
  type          PostType? @default(DEFAULT)
  author        User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  tags          Tag[]     @relation("PostToTag")
}

model Tag {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  value     String   @db.VarChar(128)
  siteId    String?
  pages     Page[]   @relation("PageToTag")
  posts     Post[]   @relation("PostToTag")
}

enum UserRole {
  USER
  ADMIN
  AUTHOR
  MANAGER
}

enum PostType {
  DEFAULT
  AUDIO
  VIDEO
  YOUTUBE
}
